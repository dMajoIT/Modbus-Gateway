#define MODBUS_SERIAL_OUT_BUFFER_LENGTH 2048
#define MODBUS_SERIAL_OUT_BUFFER_LENGTH_MASK MODBUS_SERIAL_OUT_BUFFER_LENGTH - 1 
#define MODBUS_SOCKET_MAX_NUMBERS 8
#define MODBUS_SLAVE_SOCKET_NUMBERS 4				' numbers sockets for conneting to modbus slave TCP units
#define MODBUS_RULES_ID_NUMBERS 8
#define MODBUS_RULES_PORT_NUMBERS 4
#define MODBUS_TCP_SOCKET_TYPE 0
#define MODBUS_SERIAL_SOCKET_TYPE 128
#define MODBUS_SOCKET_TYPE_FLAG 128
#define MODBUS_SOCKET_MASK 127
#define MODBUS_BUFFER_EMPTY_FLAG 255

#define MODBUS_TCP_EXEPTION_FLAG 128
#define MODBUS_TCP_EXEPTION_ROUTE_ERROR 10
#define MODBUS_TCP_EXEPTION_TIMEOUT 11

#define MODBUS_TCP_TIMEOUT 10

#define MODBUS_MONITOR_DIRECTION_IN	false
#define MODBUS_MONITOR_DIRECTION_OUT true

declare function CRC16(byref puchMsg as string, usDataLen as word) as word
declare function LRC8(byref puchMsg as string, usDataLen as word) as byte

declare overrun_buffer as boolean
declare modbus_tcp_established as boolean
declare modbus_tcp_est_counter as byte
declare modbus_tcp_connecting as boolean
declare modbus_tcp_closing as boolean

declare modbus_socks_number as byte
declare modbus_socks(MODBUS_SOCKET_MAX_NUMBERS) as byte
declare modbus_socks_last_transaction(MODBUS_SOCKET_MAX_NUMBERS) as word
declare modbus_slave_socks(MODBUS_SLAVE_SOCKET_NUMBERS) as byte

declare modbus_monitor as boolean

enum MODBUS_SERIALTYPE
	
	MODBUS_SERIAL_MASTER_RTU,
	MODBUS_SERIAL_MASTER_ASCII,
	MODBUS_SERIAL_SLAVE_RTU,
	MODBUS_SERIAL_SLAVE_ASCII

end enum

enum MODBUS_MONITOR_PACKET_TYPE
	
	MODBUS_TCP_REQUEST,
	MODBUS_TCP_RESPONCE,
	MODBUS_TCP_EXCEPTION,
	MODBUS_RTU_REQUEST,
	MODBUS_RTU_RESPONCE,
	MODBUS_ASCII_REQUEST,
	MODBUS_ASCII_RESPONCE

end enum

' Operation status for serial channel
type MODBUS_SERIALCHANNELOPERATION
	
	SerialType as MODBUS_SERIALTYPE
	OperationInProgress as boolean
	SourceU as byte
	TransactionID as word
	ClientID as byte
	Func as byte
	ShiftID as char
	TimeOut as long
	
end type

enum MODBUS_SLAVE_TCP_CONNECT
	
	MODBUS_SLAVE_TCP_DISCONNECT,
	MODBUS_SLAVE_TCP_CONNECTING,
	MODBUS_SLAVE_TCP_CONNECTED

end enum

' Operation status for TCP socket
type MODBUS_TCPSOCKETOPERATION
	
	Socket as byte
	Connected as MODBUS_SLAVE_TCP_CONNECT
	OperationInProgress as boolean
	SourceU as byte
	TransactionID as word
	TransactionIDNew as word
	ClientID as byte
	Func as byte
	ShiftID as char
	TimeOut as long
	
end type 

declare ModBusSerialChannelsOperation(NUM_SERIAL_PORTS) as MODBUS_SERIALCHANNELOPERATION
declare ModBusTCPSocketsOperation(MODBUS_SLAVE_SOCKET_NUMBERS) as MODBUS_TCPSOCKETOPERATION

declare function modbus_initialize() as boolean

declare sub modbus_send_request(byref flagsSerial as byte, byref flagsSocket as word, byref data as string, sourceU as byte, destinationU as byte, shiftID as char)
declare sub modbus_send_request_to_serial(byref data as string, sourceU as byte, destination as byte, shiftID as char, timeout as long)
declare sub modbus_send_request_to_tcp(byref data as string, sourceU as byte, destination as byte, shiftID as char, timeout as long)
declare sub modbus_send_responce(byref data as string, sourceU as byte, destinationU as byte, shiftID as char)
declare sub modbus_send_responce_to_serial(byref data as string, sourceU as byte, destination as byte, shiftID as char)
declare sub modbus_send_responce_to_tcp(byref data as string, sourceU as byte, destination as byte, shiftID as char)
declare sub modbus_send_serial_ascii(byref packet as string, channelSerial as byte, shiftID as char, pType as MODBUS_MONITOR_PACKET_TYPE)
declare sub modbus_send_serial_rtu(byref packet as string, channelSerial as byte, shiftID as char, pType as MODBUS_MONITOR_PACKET_TYPE)
declare function modbus_packet_ascii_to_bin(byref data_ascii as string) as string
declare function modbus_send_tcp(byref data as string, destination as byte, transaction as word, shiftID as char, pType as MODBUS_MONITOR_PACKET_TYPE) as boolean
declare sub modbus_store_packet(byref data as string, sourceU as byte, destinationU as byte, shiftID as char)

declare sub modbus_tcp_receive(byref data as string, channelTCP as byte, portTCP as word)
declare sub modbus_serial_receive(byref data as string, channelSerial as byte)

declare sub modbus_timeout()

declare sub modbus_monitor_send(byref data as string, sourceU as byte, direction as boolean, pType as MODBUS_MONITOR_PACKET_TYPE)

#if DEV_DEBUG_PRINT
	declare sub modbus_debug_dump(byref data as string)
#endif
