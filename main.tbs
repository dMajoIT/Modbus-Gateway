include "global.tbh"

'--------------------------------------------------------------------
dim index_page_socknum as byte
dim divider_by_2 as no_yes
dim dsr_mapping(MAX_NUM_SERIAL_PORTS) as pl_io_num
dim dtr_mapping(MAX_NUM_SERIAL_PORTS) as pl_io_num
dim cts_mapping(MAX_NUM_SERIAL_PORTS) as pl_io_num
dim port_in_use(MAX_NUM_SERIAL_PORTS) as no_yes
dim running_light as byte
dim net_linkstate as byte
dim button_pressed_ctr as byte

'====================================================================
sub on_sys_init()
	boot()
	net_linkstate=1
end sub

'--------------------------------------------------------------------
#if SIMULATE_ETHER_OFF_BY_BUTTON=0
sub on_net_link_change()
#else
sub on_button_released()
#endif
	
	#if SIMULATE_ETHER_OFF_BY_BUTTON=0
		net_linkstate=net.linkstate
	#else
		if net_linkstate=1 then
			net_linkstate=0
		else
			net_linkstate=1
		end if
	#endif
	
	ethernet_link_state_change(net_linkstate)

	#if SUPPORTS_DISPLAY
		lcd_display_page(LCD_PAGE_NET,LCD_PRINT_MODE_GENTLE,LCD_PRINT_ELEMENT_ALL)
	#endif
	
end sub

'--------------------------------------------------------------------
#if SIMULATE_ETHER_OFF_BY_BUTTON=0
sub on_button_released()

	#if SUPPORTS_DISPLAY
		'display -- pressing the button rotates through pages
		user_uses_button=YES
		if login_mode<>CMD_MODE_SERIAL then
			#if SUPPORTS_DISPLAY
				lcd_display_page(LCD_ADVANCE_PAGE,LCD_PRINT_MODE_AGGRESSIVE,LCD_PRINT_ELEMENT_ALL)
			#endif
		else
			lcd_display_on()
		end if
	#endif
end sub
#endif

sub on_button_pressed()
end sub

'--------------------------------------------------------------------
sub on_pat()

	dim channel as byte

	'<--------steve begin
	if manufacture_flag<>0 then 
		if pat.channel=0 then
			select case manufacture_flag
			case 1: pat.play("G~",PL_PAT_CANINT)
			case 2: pat.play("-",PL_PAT_CANINT)
			case 3: pat.play("R~",PL_PAT_CANINT)
			case 4: pat.play("-",PL_PAT_CANINT)
			case else
			end select
		end if
		exit sub 
	end if
	'--------->steve end

	pat_canint=YES

	#if PER_CHANNEL_STATUS_INDICATION=0
		if pat.channel=0 then
			'can_show_data_transmission(0)=NO
			if login_mode=CMD_MODE_SERIAL then
				select case quick_init_flag
				case QI_NULL:
					pat.play(PAT_BLINK_BOTH_IN_TURNS,PL_PAT_CANINT)
				case QI_OK:
					pat.play(PAT_LONG_GREEN,PL_PAT_CANINT)
					quick_init_flag=QI_NULL
				case QI_NG:
					pat.play(PAT_LONG_RED,PL_PAT_CANINT)
					quick_init_flag=QI_NULL
				end select
				exit sub
			end if
		end if
	#else
		if pat.channel<>0 then
			if port_in_use(pat.channel-1)=YES then
			can_show_data_transmission(pat.channel-1)=NO
				if login_mode=CMD_MODE_SERIAL then
					if check_if_serial_channel_is_in_login_state(pat.channel-1)=YES then
						pat.play(PAT_BLINK_BOTH_IN_TURNS,PL_PAT_CANINT)
						exit sub
					end if
				end if
			end if
		end if
	#endif

	if pat.channel=0 then
		if net.failure=YES or wln_error=YES or gprs_error=YES then
			pat.play(PAT_TWO_SHORT_RED,PL_PAT_CANINT)
			exit sub
		end if

		if error_mode=YES then
			pat.play(PAT_BLINK_RED_SLOW,PL_PAT_CANINT)
			exit sub
		end if

		if ip_configured(current_interface)=NO then
			pat.play(PAT_ONE_SHORT_GREEN,PL_PAT_CANINT)
			exit sub
		end if
	end if

'	'the rest of it is related to comm channels
	#if PER_CHANNEL_STATUS_INDICATION=0
		if pat.channel<>0 then exit sub
		ser.num=0
		channel=0
	#else
'		if pat.channel=0 then
'			select case quick_init_flag
'			case QI_NULL:
'				pat.play(PAT_GREEN_ON,PL_PAT_CANINT)
'			case QI_OK:
'				pat.play(PAT_LONG_GREEN,PL_PAT_CANINT)
'				quick_init_flag=QI_NULL
'			case QI_NG:
'				pat.play(PAT_LONG_RED,PL_PAT_CANINT)
'				quick_init_flag=QI_NULL
'			end select
'			exit sub
'		else
'			channel=pat.channel-1
'		end if
	#endif

	if port_in_use(channel)=NO then	
		pat.play("-~", PL_PAT_CANINT)
	else
		if modbus_tcp_connecting = true then
			modbus_tcp_connecting = false
			pat.play(PAT_THREE_SHORT_GREEN, PL_PAT_CANINT)			' connection established
		else
			if modbus_tcp_closing = true then
				modbus_tcp_closing = false
				'connection was reset by the other end
				pat.play(PAT_THREE_SHORT_RED, PL_PAT_CANINT)		' connection down
			else
				if modbus_tcp_established = true then
					if overrun_buffer = true then
						pat.play(PAT_BOTH_LOOP, PL_PAT_CANINT) 		'no data transmissionin progress, got overruns
					else
						pat.play(PAT_GREEN_LOOP, PL_PAT_CANINT) 	'no data transmissionin progress, not overruns
					end if
				else
					pat.play(PAT_TWO_SHORT_GREEN, PL_PAT_CANINT)	' idle status
				end if
			end if
		end if
	end if
end sub

'--------------------------------------------------------------------
sub on_sys_timer()
	dim f,x as byte

	' MODBUS
	modbus_timeout()
	
	#if SUPPORTS_DISPLAY
		lcd_proc_timer()
	#endif
	dhcp_proc_timer()
	
	#if WLN_AVAILABLE
		wln_proc_timer()
	#endif
	
	#if SUPPORTS_GPRS
		gprs_proc_timer()
	#endif

	'detect data transmission
	#if PER_CHANNEL_STATUS_INDICATION = 0
		if data_transmission_event(0) = YES then
			data_transmission_event(0) = NO
			pat.channel = 0
			if modbus_tcp_established = true then
				pat.play(PAT_GAP,PL_PAT_CANINT)
			else
				pat.play("-G**",PL_PAT_CANINT)
			end if
		end if
	#else
		for f = 0 to NUM_SERIAL_PORTS - 1
			if data_transmission_event(f) = YES then
				data_transmission_event(f) = NO
				pat.channel = f+1
				if modbus_tcp_established = true then
					pat.play(PAT_GAP,PL_PAT_CANINT)
				else
					pat.play("-G**",PL_PAT_CANINT)
				end if
			end if
		next f
	#endif
	
	
	'the following must be called once every second
	if divider_by_2=NO then
		divider_by_2=YES
		exit sub
	end if

	'we reach this point once/second
	divider_by_2=NO
	
	'--- HOOK UP THINGS THAT MUST BE CALLED EVERY SECOND ---
	
	'do we need to reconnect to the destination?

	'take care of login timeout
	if login_mode<>CMD_MODE_NONE then
		if login_tout>0 then
			login_tout=login_tout-1
			if login_tout=0 then
				logout()
			end if	
		end if
	end if

	#if SIGNAL_STRENGTH_INDICATION
		if manufacture_flag=0 then 'condition added by steve
			'wireless signal strength indication
			#if SUPPORTS_GPRS
				if current_interface=PL_SOCK_INTERFACE_PPP or wln_already_started=NO then
					if gprs_already_started=YES then
						if gprs_error<>NO then
							if running_light=0 then
								signal_strength_set(&b10101)
								running_light=1
							else
								signal_strength_set(0)
								running_light=0
							end if	
						else
							if interface_ready(PL_SOCK_INTERFACE_PPP)=NO then
								signal_strength_set(val("&b"+strgen(4-running_light,"1")+"0"+strgen(running_light,"1")))
								running_light=running_light+1
								if running_light>4 then
									running_light=0
								end if
							else
								signal_strength_set("&b10101")
							end if
						end if
					else
						signal_strength_set(0)
					end if
					goto exit_ss_indication	
				end if
			#endif

			#if WLN_AVAILABLE
				if wln_already_started=YES then	
					if wln_error<>NO then
							if running_light=0 then
								signal_strength_set(&b11111)
								running_light=1
							else
								signal_strength_set(0)
								running_light=0
							end if	
					else
						if interface_ready(PL_SOCK_INTERFACE_WLN)=NO then
							signal_strength_set(val("&b1"+strgen(running_light,"0")))
							running_light=running_light+1
							if running_light>4 then
								running_light=0
							end if
						else
							x=(wln.rssi/40)+1
							if x>5 then x=5
							signal_strength_set("&b"+strgen(x,"1"))
						end if
					end if
				else
					signal_strength_set(0)
				end if
				goto exit_ss_indication
			#endif
		end if 'condition added by steve
	#endif
exit_ss_indication:

end sub

'--------------------------------------------------------------------
public sub on_sock_data_arrival
	dim s as string
	dim x,f as byte

	dhcp_proc_data()
	
	#if WLN_AVAILABLE
		wln_proc_data()
	#endif

	#if SUPPORTS_GPRS
		gprs_proc_sock_data()
	#endif

	if sock.num=sock_udp then
		net_cmd_proc(sock.getdata(255),CMD_MODE_UDP,"U"+sock.remoteip,sock.bcast,error_mode)
		exit sub
	end if

	' TELNET
	if sock.num=sock_telnet then
		telnet_cmd_str=telnet_cmd_str+sock.getdata(255-len(ser_cmd_str))
		
		x=instr(1,telnet_cmd_str,chr(STX),1)
		'this will prevent the string to overflow with garbage
		if x=0 and len(telnet_cmd_str)=MAX_NET_CMD_LEN then
			telnet_cmd_str=""
			exit sub
		end if
		
		while x<>0
			'we've got STX
			telnet_cmd_str=right(telnet_cmd_str,len(telnet_cmd_str)+1-x) 'cut out everything to the left of it
			x=instr(1,telnet_cmd_str,chr(CR),1) 'look for command end
			if x=0 then exit sub
			net_cmd_proc(mid(telnet_cmd_str,2,x-2),CMD_MODE_TELNET,"U"+sock.remoteip+":"+str(sock.remoteport),NO,error_mode)
			telnet_cmd_str=right(telnet_cmd_str,len(telnet_cmd_str)-x)
			x=instr(1,telnet_cmd_str,chr(STX),1)
		wend
	end if

	' SNMP
	if snmp_set_enable = true then
		if sock.num = sock_snmp then
			snmp_receive(sock.getdata(255))
		end if
	end if

	' MODBUS
	for f = 0 to modbus_socks_number - 1
		if sock.num = modbus_socks(f) then
			#if DEV_DEBUG_PRINT
				dev_debugprint("ON_SOCK_DATA_ARRIVAL ModBus Socket")
			#endif
			modbus_tcp_receive(sock.getdata(255), sock.num, sock.localport)
		end if
	next f
	
	for f = 0 to MODBUS_SLAVE_SOCKET_NUMBERS - 1
	
		if sock.num = modbus_slave_socks(f) then
			#if DEV_DEBUG_PRINT
				dev_debugprint("ON_SOCK_DATA_ARRIVAL ModBus Socket")
			#endif
				modbus_tcp_receive(sock.getdata(255), sock.num, sock.localport)
		end if
	next f
	
end sub

'--------------------------------------------------------------------
public sub on_ser_data_arrival
	dim x,y as byte
	dim data as string

	#if SUPPORTS_GPRS
		if param_ge <> GE_DISABLED then
			if ser.num=GPRS_SER_PORT then
				gprs_proc_ser_data()
				exit sub
			end if
		end if
	#endif


	data = ser.getdata(255)
	modbus_serial_receive(data, ser.num)
	
end sub

'--------------------------------------------------------------------
public sub on_sock_inband
	dim s as string(MAX_NET_CMD_LEN)
	s=sock.getinband
	net_cmd_proc(left(s,len(s)-1),CMD_MODE_INBAND,"I"+sock.remoteip+":"+str(sock.remoteport),NO,error_mode)
end sub

'--------------------------------------------------------------------
sub on_sock_event(newstate as pl_sock_state, newstatesimple as pl_sock_state_simple)
	dim f as byte
	dim i as byte
	dim est as boolean

	select case newstatesimple
	case PL_SSTS_PO, PL_SSTS_AO:
		for f = 0 to modbus_socks_number - 1
			if sock.num = modbus_socks(f) then
				'modbus_tcp_connecting = true
				sock.txclear()
				pat.play(PAT_THREE_SHORT_GREEN, PL_PAT_CANINT)
			end if	
		next f

	case PL_SSTS_EST:
		for f = 0 to modbus_socks_number - 1
			if sock.num = modbus_socks(f) then
				modbus_tcp_est_counter = modbus_tcp_est_counter + 1
				modbus_tcp_established = true
			end if	
		next f
		
		for i = 0 to MODBUS_SLAVE_SOCKET_NUMBERS - 1
			if ModBusTCPSocketsOperation(i).Socket = sock.num then
				ModBusTCPSocketsOperation(i).Connected = MODBUS_SLAVE_TCP_CONNECTED
				#if DEV_DEBUG_PRINT
					dev_debugprint("ModBus. Connected" + str(ModBusTCPSocketsOperation(i).Socket))
				#endif
			end if
		next f
		
		if sock.num = sock_telnet then
			sock.txclear()
			modbus_monitor = false
		end if

	case PL_SSTS_PC, PL_SSTS_AC:
		for f = 0 to modbus_socks_number - 1
			if sock.num = modbus_socks(f) then
				'modbus_tcp_closing = true
				pat.play(PAT_THREE_SHORT_RED, PL_PAT_CANINT)
			end if	
		next f

	case PL_SSTS_CLOSED:
		if sock.num = sock_telnet then
			modbus_monitor = false
		end if
		
		for f = 0 to modbus_socks_number - 1
			if sock.num = modbus_socks(f) then
				sock.txclear()
				sock.rxclear()
				modbus_tcp_est_counter = modbus_tcp_est_counter - 1
				if modbus_tcp_est_counter = 0 then
					modbus_tcp_established = false
				end if
			end if	
		next f

		for i = 0 to MODBUS_SLAVE_SOCKET_NUMBERS - 1
			if ModBusTCPSocketsOperation(i).Socket = sock.num then
				ModBusTCPSocketsOperation(i).Connected = MODBUS_SLAVE_TCP_DISCONNECT
				#if DEV_DEBUG_PRINT
					dev_debugprint("ModBus. Disconnect" + str(ModBusTCPSocketsOperation(i).Socket))
				#endif
	end if
		next f
		
	case else:
		'force LED pattern change for comm channel 0 (unless we are in serprog mode)
		if login_mode<>CMD_MODE_SERIAL then
			pat.channel = 0
			pat.play(PAT_GAP, PL_PAT_CANINT)
		end if
	
	end select
		
	'socket is closing? this can mean the end of setup session
	if newstatesimple=PL_SSTS_CLOSED then
		sock_closed_check_net_login(sock.num) 'maybe need to close login
	end if
	
	'this is for comm channel sockets only
	for f = 0 to modbus_socks_number - 1
		if sock.num = modbus_socks(f) then
			#if SUPPORTS_DISPLAY
				lcd_display_page(LCD_PAGE_CH1+f,LCD_PRINT_MODE_GENTLE,LCD_PRINT_ELEMENT_CH_OTF)
			#endif
		end if	
	next f
	
	if sock.num = index_page_socknum and newstate = PL_SST_CL_ACLOSED then
		if html_reboot_flag = YES then 
			sys.reboot
		else
			index_page_socknum = 255
		end if
	end if
end sub

''--------------------------------------------------------------------
sub on_ser_esc()
end sub

'--------------------------------------------------------------------
#if WLN_AVAILABLE
sub on_wln_event(wln_event as pl_wln_events)
	wln_proc_event(wln_event)
end sub
#endif

'--------------------------------------------------------------------
#if WLN_AVAILABLE
sub on_wln_task_complete(completed_task as pl_wln_tasks)
	wln_proc_task_complete(completed_task)
end sub
#endif

sub on_ser_data_sent()
	' TODO: place "on_ser_data_sent" event handler code here...
end sub